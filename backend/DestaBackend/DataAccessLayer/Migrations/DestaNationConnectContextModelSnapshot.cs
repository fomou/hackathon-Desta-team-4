// <auto-generated />
using System;
using DestaNationConnect.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DestaNationConnect.DataAccessLayer.Migrations
{
    [DbContext(typeof(DestaNationConnectContext))]
    partial class DestaNationConnectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Door")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Announce", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Announce");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.AnnounceTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnnounceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("AnnounceTag");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Business", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("AboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarketingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PartnerBusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PartnerBusinessStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Teasing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("PartnerBusinessId");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.BusinessDetail", b =>
                {
                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Google")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessId");

                    b.ToTable("BusinessDetail");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.ChatData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("ChatData");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.ChatMessage", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserFromID")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserToID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Customer", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.CustomerDetail", b =>
                {
                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerDetail");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.CustomerFavoriteBusiness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerFavoriteBusiness");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.CustomerHabit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfAction")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerHabit");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Like", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.OAuthProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OAuthProvider");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BusinessUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("PostTagId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUserId");

                    b.HasIndex("PostTagId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.PostComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.PostTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TagTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TagTypeId");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8503),
                            Description = "Interest WHY tag about .......",
                            Name = "Volunteering",
                            TagTypeId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8834),
                            Description = "Interest WHY tag about .......",
                            Name = "Work opportunities",
                            TagTypeId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8837),
                            Description = "Interest WHY tag about .......",
                            Name = "Community Event",
                            TagTypeId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8839),
                            Description = "Interest WHY tag about .......",
                            Name = "Promotion / Sale",
                            TagTypeId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8840),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Automotive",
                            TagTypeId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8842),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Business Services",
                            TagTypeId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8843),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Computers & Electronics",
                            TagTypeId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8844),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Construction & Contractors",
                            TagTypeId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8845),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Education",
                            TagTypeId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8847),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Entertainment",
                            TagTypeId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8848),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Food & Dining",
                            TagTypeId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8850),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Health & Lifestyle",
                            TagTypeId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8851),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Home & Garden",
                            TagTypeId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(8852),
                            Description = "Descriptive WHAT tag about ...",
                            Name = "Legal & Financial",
                            TagTypeId = 2L
                        });
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.TagPurpose", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("TagPurpose");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 196, DateTimeKind.Utc).AddTicks(7569),
                            Description = "Description de what is a tag of type Interest",
                            Name = "Interest"
                        },
                        new
                        {
                            Id = 2L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 196, DateTimeKind.Utc).AddTicks(8086),
                            Description = "Description de what is a tag of type Descriptive",
                            Name = "Descriptive"
                        });
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.TagType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("TagType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(5346),
                            Description = "Description of what is a WHY tag",
                            Name = "Why"
                        },
                        new
                        {
                            Id = 2L,
                            CreationDate = new DateTime(2021, 9, 19, 5, 17, 27, 198, DateTimeKind.Utc).AddTicks(5954),
                            Description = "Description of what is a WHAT tag ",
                            Name = "What"
                        });
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBIPOC")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.UserFeed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserFeed");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.UserOAuth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailIsVerified")
                        .HasColumnType("bit");

                    b.Property<long>("OAuthProviderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("OAuthProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOAuth");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.UserProfile", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.UserTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagPurposeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TagPurposeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTag");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Address", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Announce", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany("Announces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.AnnounceTag", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Announce", "Announce")
                        .WithMany()
                        .HasForeignKey("AnnounceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Announce");

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Business", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Business", "PartnerBusiness")
                        .WithMany()
                        .HasForeignKey("PartnerBusinessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PartnerBusiness");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.BusinessDetail", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.ChatData", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.ChatMessage", "ChatMessage")
                        .WithMany("ChatDatas")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChatMessage");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.ChatMessage", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Customer", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.CustomerDetail", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.CustomerFavoriteBusiness", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.CustomerHabit", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Like", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Post", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.PostTag", "PostTag")
                        .WithMany("Posts")
                        .HasForeignKey("PostTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("PostTag");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.PostComment", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Business", "Business")
                        .WithMany("PostComments")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Tag", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.TagType", "TagType")
                        .WithMany("Tags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.UserFeed", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany("UserFeeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.UserOAuth", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.OAuthProvider", "OAuthProvider")
                        .WithMany()
                        .HasForeignKey("OAuthProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OAuthProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.UserProfile", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.UserTag", b =>
                {
                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.TagPurpose", "TagPurpose")
                        .WithMany()
                        .HasForeignKey("TagPurposeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DestaNationConnect.DataAccessLayer.Models.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("TagPurpose");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Business", b =>
                {
                    b.Navigation("PostComments");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.ChatMessage", b =>
                {
                    b.Navigation("ChatDatas");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.Post", b =>
                {
                    b.Navigation("PostComments");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.PostTag", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.TagType", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DestaNationConnect.DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Announces");

                    b.Navigation("Likes");

                    b.Navigation("UserFeeds");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}
